# region HASP

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Aladdin.HASP;
using Aladdin.Hasp;
using System.Diagnostics;
using Iadeptmain.Classes;
//using iAdeptMarketing.Designer.Classes;


namespace Iadeptmain.Mainforms
{
    public partial class frmHasp : DevComponents.DotNetBar.Office2007Form
    {


        HaspFeature feature = HaspFeature.FromFeature(10);
        HaspFeature feature1 = HaspFeature.FromFeature(1);

        Hasp m_objHasp = null;
        Hasp m_objHasp1 = null;        
        HaspFeature m_objHaspFeature = HaspFeature.FromFeature(10);
        HaspFeature m_objHaspFeature1 = HaspFeature.FromFeature(1);
        CSysPro m_objCSysPro = null;
        public delegate void ExitButtonClickedHandler();
        public event ExitButtonClickedHandler ExitButtonClicked;
        public event ExitButtonClickedHandler DemoButtonClicked;
        public event ExitButtonClickedHandler TryButtonClicked;
        byte[] m_objByteData = { 0x01, 0x30, 0x30, 0x06, 0x02, 0x46, 0x53, 0x63, 0x37, 0x3a, 0x5c, 0x7e, 0x70, 0x6c, 0x46, 0x33, 0x30, 0x32, 0x5c, 0x74, 0x6f, 0x72, 0x75 };
        private bool bFormClose = false;
        private string m_sBaseDirectory = AppDomain.CurrentDomain.BaseDirectory;

       

        private const string m_sTest = "595963602115624431633213621186596218641133591530639169591499595962631564602109613131574176603782572214613166635111597210645185642796632111643136566248588115621845571184624109599664639145629506579955603195609315642171596146605495613181574189631255597172628119571990620579643111604165628776608674574190599187636456577197570116612112629166601417571295601188605709599152593163633421602103571119580455590468590901593100571495593146633164593199600136604184596136571175577125597130594127572985639681629117621206628941631998641681598107609121566149590167634116601761620110633374633768640130613159611194573169593651599141566192575624570871644225637607608606605146608990572561633206605165604605623187571145636459633502597911638193576192627154597183624851574523621298570883596889589990635107628982599159577327596580589624574172580291572549589119599716597390637742574175609225631173640175621100590155628138572106633309613798641687591175604192637125633172592107633101623572596148607186579176594386571801608111613173597173634212639150589116603205633145603152627195574184578193636160600126591912645144641727605165631206588770598184605152625722641804599151609214604136636448579623622137611672588458640136579217612617578221609141577175572123575205630399613149597693578194639756608147622119588195602133592127588761570210629184566176593197627174589101596928571614580155634194580160579830640148597127622138633561612138604646571890598259611552575423626136609370591840642829645920637728594397612202642155604125594149573612608461643763595175580393623102598115576489571170597107607112600938577661612545600671637833573912589877635131630445566125609209599193627182601139598113577911605927632199590574644281595386608349578148639168603816580625644955609995638177638188600168641991642149636204623158579178573284636249638204620127596114624246598814578244642403603673620108571360600141592112571106580290574113570794644187632589633132580100622200605208641210571203613168573711600171622136636440628192628196603951636627603199579304589144594128605139643168596123574127622142580168643595604173607165592818579139578200643699611175632990639100605142576395637183593131598126606706590102630678624118580233622130579547626458571163597122622213642183631165605173588105596869610187570185620666642150574297621293639204612320570150574188613175621969643209637135636159643618570129570228573158629157570560592944641205573386595486576127566258640174631140596170611118632589588208590914575169571683595116590195591963606677608209591358626182625491640169630172575507577279592177606151595170594163628152611162598167571178621194624279603145602117566347588295613105590133642699612116570103602118577180571911571159596319606120636903588136637201635417574156600834632470610765580189601212627204628612609170571437602462580138639205624882627888632497590193621673598206601144589485633194633538642692600147623618644861595206590138631428601139606252608147580136642383579159637988591406639256608322632116621726590114601723604570621194645189612290635709641196576141571230633145645902574207634177643295580192580144602127624125577212624137590127608118611209592206608690606498622144636165626153633416607173599280633190566795573196642121638167608865570832620135626156636116640116627944644569597143574758608129622121597111641112574121621118588149594201589168612360592202620120599167623141625313579202578196645186603621605172630977636481638180574191593409606426620770644195594112594229613141622149636140576188641144598445636421632143642528606123571408629923632279608190566179623180607130639208644124632127643135589122578209607126633192609816570155613134595718624784633418595168642190643165576109572537645195600193637127644201636160578525622133634152589191630539591201621204580123636752566127592831626709626981604817636183639154601143625210637147642103641122573716592189633821613868629116629767572813602125642200591151612816577138627181599827641204622566577149576187641614644165629122588211577166626173595977570925613841635911639114611180612197589194642975580383631195637159622708637104600103591158572123624101636900604190576147579147632131607213592288608977604794613231633861599152578456599750611230633123588203644239624207645204611112592192576167640102588406634143574101621451635200645453571837644118601427632202632121605189590172637164597176627850591622603163577101579174571108620159637379604120588136642162645115604797603165574132599904622707593230632114571106607202637111626198629112608341636154634182630110621194608168609479606166604388566625611122636142633209622132572207621208635960575105611196642123605382604144629405634167570124570144642505640166609579613580632188643187566785623119594672573207604140592491643577633166612880571210566764609171642433643204604954573152603300611119642109639969630130643745609737607104624150633155643200591502613117606957580108573195579887610149580640620906608653606186637688595468571477607291624358577421604683622201593123630134641491634112590136588152597471574916612571603398626453621177604854605124609636626746634488573207631102580956623143576108570140611487608874574578641510630178606491602101588387605316620357573163641106566658590118622553580173593170613148600211634920590600620453644102639101603159643197623402602195578435641154599187571584606149604208635442609249639790607101638830599424638170574179627136632142572137627180631212588628603433633333575147575161635145609168630808566174629200626171600106593195613884612121638209620922579630576104589914596723595171627195638947566682628653588169629136598948609316606174594179612141642200590340574151601101570665627254600127624212609127640846598396625122622209604102622336642490622184623136575791607323577141604140584493";

        public frmHasp()
        {
            InitializeComponent();
            this.CancelButton = btnExit;

           
        }

        public string StatusLabel
        {
            set
            {
                lblStatus.Text = value;
            }
        }

        public DevExpress.XtraEditors.SimpleButton TryButton
        {
            get
            {
                return btnTryAgain;
            }


        }

        public CSysPro SystemPro
        {
            set
            {
                m_objCSysPro = value;
            }
        }
        public DevExpress.XtraEditors.SimpleButton DemoButton
        {
            get
            {
                return btnDemo;
            }
        }
        private string m_sFrmOtherThread = null;
        public string FromOtherThread
        {
            set
            {
                m_sFrmOtherThread = value;
            }
        }

        public bool FormClose
        {
            get
            {
                return bFormClose;
            }
        }

        public string sFormClosed = "NotClosed";

        public string GetFormClosed
        {
            get
            {
                return sFormClosed;
            }
        }

        private void btnTryAgain_Click(object sender, EventArgs e)
        {
            try
            {
                if (TryButtonClicked != null)
                    TryButtonClicked();
                CheckAgain();

            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
            finally
            {
                m_objHasp = null;
                m_objHasp1 = null;
            }

        }

        private void CheckAgain()
        {
            bool bAck = false;
            bool bEncAck = false;
            bool bDecAck = false;

            try
            {
                if (m_objCSysPro != null)
                {
                    bAck = m_objCSysPro.Test();

                    //bEncAck = m_objCSysPro.Check(m_objByteData);
                    //bDecAck = m_objCSysPro.UnCheck(m_objByteData);

                    if (bAck)
                    {
                        this.Close();
                    }
                    else if (!bAck)
                    {
                        if (lblStatus != null)
                        {
                            if (m_objCSysPro.label == "Wrong")
                            { lblStatus.Text = "Wrong Hasp Key Connected"; }
                            else { lblStatus.Text = "Hasp Key Not Connected"; }
                        }
                        return;
                    }
                }


            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        private void btnExit_Click(object sender, EventArgs e)
        {
            try
            {
                if (this.ExitButtonClicked != null)
                    ExitButtonClicked();
                this.Close();
                sFormClosed = "Closed";
                
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        private void btnInstallDrivers_Click(object sender, EventArgs e)
        {
            try
            {
                m_sBaseDirectory += @"HASP\HASPUserSetup.exe";
                Process.Start(m_sBaseDirectory);

            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        private void btnDemo_Click(object sender, EventArgs e)
        {
            try
            {
                if (DemoButtonClicked != null)
                {
                    DemoButtonClicked();
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        internal void DisBts()
        {
            try
            {
                btnDemo.Enabled = false;
            }
            catch (Exception ex)
            {
            }
        }
      
        internal void EnableControlBox()
        {
            try
            {
                this.ControlBox = true;
                this.MaximizeBox = false;
                this.MinimizeBox = true;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }

        }

        private void frmHasp_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.F4 && e.Modifiers == Keys.Alt)
                {
                    this.ExitButtonClicked();
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message, ex.StackTrace);
            }
        }

        private void frmHasp_KeyPress(object sender, KeyPressEventArgs e)
        {

        }

    }
}

#endregion